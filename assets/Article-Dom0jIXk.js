import"./base-C1eoIJKg.js";import{E as _}from"./el-backtop-CuVRF7To.js";import{_ as d}from"./HeaderNav-D3uIfm3R.js";import{_ as p,r as m,c as e,b as r,a as t,F as a,m as v,t as o,o as n}from"./index-VS2PECJp.js";import"./el-popper-C0mYZMSb.js";const S={class:"container"},x={class:"content"},V={class:"box1",key:"id"},f={class:"box2"},P={class:"box3"},b={__name:"Article",setup(h){const l=m([{id:1,title:"Vue3 + Pinia 状态管理实战：从入门到企业级应用",content:"一、为什么选择 Pinia 而非 Vuex？​随着 Vue3 成为主流，官方推荐的状态管理库从 Vuex 转向了 Pinia。相比 Vuex 4，Pinia 有三大核心优势：​简化的 API 设计：移除了 Vuex 中繁琐的 mutation，直接通过 action 处理同步与异步逻辑，代码量减少 30% 以上；​原生 TypeScript 支持：无需手动编写复杂的类型声明，TS 类型推断全覆盖，开发时能实时捕获类型错误；更灵活的模块化：支持多 Store 实例，可按业务模块拆分状态（如用户 Store、购物车 Store），避免单一 Store 臃肿。​二、Pinia 核心用法实战​1. 基础 Store 搭建​首先通过 defineStore 定义一个 Store，以 “用户状态管理” 为例：​2. 组件中使用 Store​在 Vue3 组件中通过 useUserStore 调用状态与方法，支持组合式 API 与选项式 API：​三、企业级应用技巧​调试工具：在 Vue DevTools 中直接查看 Pinia 状态，无需额外配置，开发时可实时监控状态变化。"}]);return(c,i)=>{const u=_;return n(),e(a,null,[r(u,{right:100,bottom:100}),t("div",S,[r(d),t("div",x,[(n(!0),e(a,null,v(l.value,s=>(n(),e("div",V,[t("h1",null,o(s.title),1),t("p",null,o(s.content),1)]))),128)),t("div",f,[t("div",P,[t("span",null,o(c.currentTime),1)]),i[0]||(i[0]=t("div",{class:"box4"},[t("div",null,"1"),t("div",null,"2"),t("div",null,"3"),t("div",null,"4")],-1))])])])],64)}}},T=p(b,[["__scopeId","data-v-62051f99"]]);export{T as default};
